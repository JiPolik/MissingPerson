package com.peratera.common.provision.domain;

import lombok.Getter;

/**
 * &copy; 2021-2022 Peratera. All rights reserved.<br/><br/>
 *
 * @author Dmitry Ionash <a href="mailto:idv@peratera.com">idv@peratera.com</a>, created 2021-Sep-06
 * @version 0.4.27
 * @since 1.0.0
 */
@Getter
public enum ErrorCode {


    OAUTH2_TRANSLATION_ERROR(10001, "Unexpected OAuth2 error on authorization: [%s]"),
    REFRESH_TOKEN_PARSE_ERROR(10101, "Refresh Token JWT Claims JSON could not be parsed"),
    ACCESS_TOKEN_CONVERT_ERROR(10111, "Cannot convert access token to JSON"),
    INSUFFICIENT_AUTHORITIES_NO_SCOPES(10201, "Insufficient authorities, no required scopes"),
    INSUFFICIENT_AUTHORITIES_WRONG_SCOPES(10202, "Insufficient authorities, wrong scopes"),
    //authorization-server-conductor
    ACCESS_DENIED_ERROR(11001, "Unexpected access denied error: [%s]"),
    OAUTH2_AUTHORIZATION_ERROR(11002, "Authorization error: [%s]"),
    INSUFFICIENT_AUTHENTICATION_ERROR(11003, "Insufficient authentication exception: [%s]"),
    REST_TEMPLATE_RESPONSE_ERROR(11004, "Inner communication error: [%s]"),
    INSUFFICIENT_SCOPE_RESOURCE(11005, "Insufficient scope [%s] for this resource"),
    INVALID_ACCESS_TOKEN(11011, "Invalid access token"),
    ACCESS_TOKEN_EXPIRED(11012, "Access token expired"),
    INVALID_MERCHANT_ACCESS_TOKEN(11013, "Invalid merchant access token"),
    OBSOLETE_MERCHANT_TOKEN(11014, "Invalid merchant access token: obsolete token"),
    INVALID_REFRESH_TOKEN(11021, "Invalid refresh token"),
    REFRESH_TOKEN_EXPIRED(11022, "Refresh token expired"),
    //admin-api
    CURRENCY_NOT_FOUND_BY_ID(12001, "Currency with ID [%d] not found"),
    CURRENCY_EXISTS_BY_ID(12002, "Currency with code [%s] already exists"),
    CURRENCY_EXISTS_BY_CODE(12003, "Currency with code [%s] already exists"),
    PAYMENT_METHOD_NOT_FOUND_BY_ID(12004, "PaymentMethod with ID [%d] not found"),
    PAYMENT_METHOD_EXISTS_BY_ID(12005, "PaymentMethod with ID [%d] already exists"),
    PAYMENT_METHOD_EXISTS_BY_NAME(12006, "PaymentMethod with name [%s] already exists"),
    ADMIN_CREATE_MERCHANT_INITIATOR_NOT_FOUND(12011, "The User [%s] is not found"),
    ADMIN_MERCHANT_NOT_FOUND(12012, "The Merchant with UUID [%s] not found"),
    ADMIN_MERCHANT_CDD_DOCUMENT_NOT_FOUND(12013, "Can't find CDD document of type [%s] for merchant [%s]"),
    ADMIN_MERCHANT_CDD_DOCUMENT_S3_LOAD_ERROR(12014, "Can't load CDD document [%s] from S3"),
    ADMIN_MERCHANT_UPDATE_CURRENCIES_INVALID(12015,
            "The field [%s] contains currency codes [%s] are invalid or not present in the Peratera DB"),
    ADMIN_MERCHANT_ACTIVATE_ALREADY_ACTIVATED(12016, "Merchant [%s] is already activated"),
    ACCOUNT_TYPE_GET_NOT_FOUND(12021, "Account Type with code [%s] is not found"),
    ACCOUNT_TYPE_MODEL_CREATE_DUPLICATE(12022, "Account Type's code [%2$s] is already present in database"),
    ACCOUNT_TYPE_UPDATE_NOT_FOUND(12023, "Account Type with code [%s] is not found"),
    ACCOUNT_TYPE_REMOVE_NOT_FOUND(12024, "Account Type with code [%s] is not found"),
    ACCOUNT_TYPE_REMOVE_IMPOSSIBLE(12025, "Account Type with code [%s] cannot be removed"),
    PROVIDER_UPDATE_NOT_FOUND_BY_UUID(12031, "Provider with UUID [%s] not found"),
    PROVIDER_DELETE_NOT_FOUND_BY_UUID(12032, "Provider with UUID [%s] not found"),
    PROVIDER_GET_CURRENCIES_PROVIDER_NOT_FOUND_BY_UUID(12033, "Provider with UUID [%s] not found"),
    PROVIDER_ADD_CURRENCY_PROVIDER_NOT_FOUND_BY_UUID(12034, "Provider with UUID [%s] not found"),
    PROVIDER_DELETE_CURRENCY_PROVIDER_NOT_FOUND_BY_UUID(12035, "Provider with UUID [%s] not found"),
    PROVIDER_DELETE_CURRENCY_CURRENCY_NOT_SUPPORTED_BY_UUID(12035,
            "Currency [%s] not supported by the provider with UUID [%s]"),
    TARIFF_PLAN_GET_BY_ACCOUNT_ACCOUNT_NOT_FOUND(12041, "Account with UUID [%s] related with Tariff Plan is not found"),
    TARIFF_PLAN_CREATE_ACCOUNT_NOT_FOUND(12042, "Account with UUID [%s] related with Tariff Plan is not found"),
    TARIFF_PLAN_CREATE_NAME_ALREADY_CREATED(12043, "Tariff Plan with name [%s] is already created"),
    TARIFF_PLAN_CREATE_VALID_SINCE_LATER(12044, "Valid since date is equal or later Valid till date"),
    TARIFF_PLAN_UPDATE_NOT_FOUND(12045, "Tariff Plan is not found"),
    TARIFF_PLAN_UPDATE_NAME_ALREADY_CREATED(12046, "Tariff Plan with name [%2$s] is already created"),
    TARIFF_PLAN_UPDATE_VALID_SINCE_LATER(12047, "Valid since date is equal or later Valid till date"),
    TARIFF_PLAN_DELETE_NOT_FOUND(12048, "Tariff Plan with UUID [%s] is not found"),
    TARIFF_PLAN_DELETE_USED_IN_ACCOUNT(12049,
            "Tariff Plan with UUID [%s] id used in account with UUID [%s] and cannot be removed"),
    TARIFF_PLAN_DELETE_INTEGRITY_VIOLATION(12050, "Tariff Plan with UUID [%s] has Fee Rule(s) and cannot be removed"),
    FEE_RULE_GET_BY_TARIFF_PLAN_NOT_FOUND(12061, "Tariff Plan with UUID [%s] related with Fee Rule is not found"),
    FEE_RULE_GET_BY_UUID_NOT_FOUND(12062, "Fee Rule with UUID [%s] is not found"),
    FEE_RULE_CREATE_TARIFF_PLAN_NOT_FOUND(12071, "Specified Tariff Plan with UUID [%s] is not found"),
    FEE_RULE_CREATE_PAYMENT_METHOD_PRESENTS(12072, "Fee Rule for specified Tariff Plan and Payment Method is present"),
    FEE_RULE_UPDATE_FEE_RULE_NOT_FOUND(12081, "Fee Rule with UUID [%s] is not found"),
    FEE_RULE_UPDATE_PAYMENT_METHOD_PRESENTS(12082, "Fee Rule for specified Tariff Plan and Payment Method is present"),
    FEE_RULE_DELETE_NOT_FOUND(12091, "Fee Rule is not found"),
    FEE_RULE_DELETE_CANNOT_BE_REMOVED(12092, "Fee Rule cannot be removed due database integrity"),
    ACCOUNT_CLEAN_ACCOUNT_NOT_FOUND(12101, "Account with UUID [%s] is not found"),
    ADMIN_CUSTOMER_TYPE_WITH_NAME_NOT_FOUND(12111, "Customer Type with name [%s] is not found"),
    CUSTOMERS_ACCOUNTS_ACTIVE_PARAMETER_INCORRECT(12112,
            "Incorrect value [%s] for the Active parameter. Only Boolean[true/false] or [ALL] values are supported"),
    CUSTOMER_EVENT_NOT_FOUND(12126, "Customer event not found"),
    MERCHANT_NOT_FOUND(12127, "Merchant [%s] can't be empty"),
    NOTIFICATION_CREATE_MODEL_MODEL_TYPE_NOT_BLANK(12131, "The field [%s] cannot be blank"),
    NOTIFICATION_CREATE_MODEL_DESTINATION_NOT_BLANK(12133, "The field [%s] cannot be blank"),
    NOTIFICATION_CREATE_MODEL_METHOD_NOT_BLANK(12134, "The field [%s] cannot be blank"),
    NOTIFICATION_CREATE_MODEL_TRANSPORT_TYPE_NOT_BLANK(12135, "The field [%s] cannot be blank"),
    NOTIFICATION_CREATE_MODEL_TYPE_UNRECOGNIZED(12136, "The value [%s] is not recognized as Notification Model Type"),
    NOTIFICATION_CREATE_MODEL_METHOD_UNRECOGNIZED(12137, "The value [%2$s] is not recognized as Notification Method"),
    NOTIFICATION_CREATE_MODEL_ACTION_TYPE_UNRECOGNIZED(12138,
            "The value [%s] is not recognized as Notification Action Type"),
    NOTIFICATION_CREATE_MODEL_PARAMETERS_EMPTY(12139,
            "The value of the field 'parameters' is null or filled incorrectly"),
    NOTIFICATION_CREATE_MODEL_PARAMETERS_SIZE(12140,
            "The field 'parameters' contains a value that does not match the number of parameters in the template"),
    NOTIFICATION_CREATE_MODEL_BODY_NOT_BLANK(12141, "The field 'body' cannot be blank"),
    NOTIFICATION_CREATE_MODEL_SUBJECT_NOT_BLANK(12142, "The field 'subject' cannot be blank"),
    NOTIFICATION_CREATE_MODEL_TRANSPORT_UNRECOGNIZED(12143,
            "The value [%2$s] is not recognized as Notification Transport"),
    DEFAULT_TARIFF_PLAN_GET_BY_UUID_NOT_FOUND(12151, "Default Tariff Plan with UUID [%s] is not found"),
    DEFAULT_TARIFF_PLAN_CREATE_ACCOUNT_TYPE_NOT_FOUND(12152, "Account Type with code [%s] is not found"),
    DEFAULT_TARIFF_PLAN_CREATE_CURRENCY_NOT_FOUND(12153, "Currency with code [%s] is not found"),
    DEFAULT_TARIFF_PLAN_CREATE_NAME_ALREADY_CREATED(12154, "Default Tariff Plan with name [%s] is already created"),
    DEFAULT_TARIFF_PLAN_CREATE_VALID_SINCE_LATER(12155, "Valid since date is equal or later Valid till date"),
    DEFAULT_TARIFF_PLAN_UPDATE_NOT_FOUND(12156, "Default Tariff Plan with UUID [%s] is not found"),
    DEFAULT_TARIFF_PLAN_UPDATE_NAME_ALREADY_CREATED(12157, "Default Tariff Plan with name [%2$s] is already created"),
    DEFAULT_TARIFF_PLAN_UPDATE_ACCOUNT_TYPE_NOT_FOUND(12158, "Account Type with code [%s] is not found"),
    DEFAULT_TARIFF_PLAN_UPDATE_CURRENCY_NOT_FOUND(12159, "Currency with code [%s] is not found"),
    DEFAULT_TARIFF_PLAN_UPDATE_VALID_SINCE_LATER(12160, "Valid since date is equal or later Valid till date"),
    DEFAULT_TARIFF_PLAN_DELETE_NOT_FOUND(12161, "Default Tariff Plan with UUID [%s] is not found"),
    DEFAULT_TARIFF_PLAN_DELETE_INTEGRITY_VIOLATION(12162, "Default Tariff Plan with UUID [%s] has Fee Rule(s) and cannot be removed"),
    DEFAULT_FEE_RULE_GET_BY_UUID_NOT_FOUND(12171, "Default Fee Rule with UUID [%s] is not found"),
    DEFAULT_FEE_RULE_CREATE_TARIFF_PLAN_NOT_FOUND(12172, "Specified Default Tariff Plan with UUID [%s] is not found"),
    DEFAULT_FEE_RULE_CREATE_ALREADY_PRESENT(12173, "Default Fee Rule for specified Default Tariff Plan and Payment Method is present"),
    DEFAULT_FEE_RULE_UPDATE_FEE_RULE_NOT_FOUND(12174, "Default Fee Rule with UUID [%s] is not found"),
    DEFAULT_FEE_RULE_UPDATE_PAYMENT_METHOD_PRESENT(12175, "Default Fee Rule for specified Tariff Plan and Payment Method is present"),
    DEFAULT_FEE_RULE_DELETE_NOT_FOUND(12176, "Default Fee Rule with UUID [%s] is not found"),
    DEFAULT_FEE_RULE_PAYMENT_METHOD_NOT_FOUND(12177, "Specified Payment Method ID is not found in DB"),
    ADMIN_GET_USER_USER_NOT_FOUND(12200, "The User with username [%s] is not found"),
    ADMIN_CREATE_USER_ALREADY_EXIST_WITH_THIS_USERNAME(12201, "The User with username [%s] already exist"),
    ADMIN_GET_USER_PROFILE_USER_IS_NOT_FOUND(12202, "The User profile for User [%s] is not found"),
    ADMIN_ADD_USER_CUSTOMER_RELATION_USER_NOT_FOUND(12203, "The User [%s] is not found"),
    ADMIN_REMOVE_USER_AUTHORITY_USER_NOT_FOUND(12204, "The User [%s] is not found"),
    ADMIN_ADD_USER_CUSTOMER_RELATION_CUSTOMER_NOT_FOUND(12205, "The Customer [%s] is not found"),
    ADMIN_ADD_USER_CUSTOMER_RELATION_CLEAR_AUTHORITIES_IMPOSSIBLE(12206, "Can't clear authorities for user [%s]"),
    ADMIN_ADD_USER_CUSTOMER_RELATION_ADMIN_NOT_FOUND(12207, "The Admin [%s] is not found"),
    CLAIM_ASSIGN_TICKET_NOT_FOUND(12211, "The claim with ticket ID [%s] not found"),
    CLAIM_ASSIGN_TICKET_ASSIGNED(12212, "The claim with ticket ID [%s] already assigned by another admin [%s]"),
    CLAIM_RESOLVE_TICKET_NOT_FOUND(12221, "The claim with ticket ID [%s] not found"),
    CLAIM_RESOLVE_ASSIGN_WRONG(12222, "The admin [%s] is not assigned for the ticket ID [%s]"),
    //business-common
    PAYMENT_ACCOUNT_NOT_FOUND(13001, "The account with UUID [%s] not found"),
    PAYMENT_CURRENCY_DOES_NOT_MATCH_ACCOUNT_CURRENCY(13002,
            "Payment currency [%s] does not match account currency [%s]"),
    PAYMENT_LOW_BALANCE(13003, "The account with UUID [%s] has low balance [%s] for payment of [%s]"),
    ACCOUNT_CURRENCY_NOT_SUPPORTED_BY_FSP(13004, "Account currency [%s] is not supported by the FSP [%s]"),
    FSP_ACCOUNT_EXISTS(13005, "FSP account exists for account [%s] and the FSP [%s]"),
    FSP_ADAPTER_CLASS_NOT_FOUND(13006, "FSP adapter class [%s] not found"),
    CUSTOMER_TYPE_NOT_SUPPORTED_BY_FSP(13007, "Customer type [%s] is not supported by the FSP [%s]"),
    FSP_CREATE_CUSTOMER_INDIVIDUAL_INFO_NULL(13008, "Private Individual [%s] has no info"),
    FSP_NOT_CONFIGURED(13009, "No FSP configured for customer type [%s] and account type [%s]"),
    FSP_ACCOUNT_DOES_NOT_EXIST(13010, "FSP account doesn't exist for account [%s]"),
    PAYMENT_DEST_ACCOUNT_NOT_FOUND(13011, "The account with UUID [%s] not found"),
    DESTINATION_FSP_ADAPTER_DIFFERENT(13012,
            "Destination account's FSP adapter is different from source FSP adapter"),
    PAYMENT_REFERENCE_INCORRECT_FORMAT(13013, "Payment reference incorrect format: [%s]"),
    PAYMENT_CURRENCY_DOES_NOT_MATCH_DEST_ACCOUNT_CURRENCY(13014,
            "Payment currency [%s] does not match destination account currency [%s]"),
    PAYMENT_ACCOUNT_NOT_ACTIVE(13015, "The account with UUID [%s] is not active"),
    PAYMENT_DEST_ACCOUNT_NOT_ACTIVE(13016, "The account with UUID [%s] is not active"),
    FSP_SERVICE_ACCOUNT_NOT_FOUND(13017, "The account with UUID [%s] not found"),
    PAYMENT_PROCESS_NOT_FOUND(13018, "The payment create process with key [%s] is not found for user [%s]"),
    PAYMENT_PROCESS_WRONG_STATUS(13019,
            "The payment create process with key [%s] has wrong status [%s] for current action"),
    PAYMENT_PROCESS_WRONG_CONFIRMATION_CODE(13020, "Supplied confirmation code [%s] is wrong"),
    PAYMENT_PROCESS_CONFIRMATION_LIMIT_REACHED(13021, "Payment confirmation attempts limit reached"),
    PAYMENT_PROCESS_WRONG_RESULT_STATUS(13022,
            "The payment create process with key [%s] resulted in wrong status [%s]"),
    PAYMENT_PROCESS_NOT_FOUND_FOR_TRANSACTION(13023, "The payment create process is not found for transaction [%s]"),
    CUSTOMER_COUNTRY_NOT_SUPPORTED_BY_FSP(13024, "Customer country [%s] is not supported by the FSP"),
    //authorization-server
    USER_ALREADY_CREATED(15001, "User with email [%s] already created"),
    USER_IS_NOT_FOUND(15002, "User with email [%s] is not found"),
    USER_ALREADY_ACTIVATED(15003, "User with email [%s] is already activated"),
    USER_LOCKED_NO_CODE(15004, "User with email [%s] is not activated but no required code"),
    USER_CODE_MISMATCH(15005, "Confirmation code does not match the User [%s] code"),
    USER_NOT_FOUND_ON_REMOVE(15006, "User with email [%s] is not found"),
    USER_NOT_ACTIVATED(15007, "User with email [%s] is not activated"),
    DUPLICATE_AUTHORITY(15011, "Authority with the same name [%s] already exists"),
    AUTHORITY_NOT_FOUND(15012, "Authority [%s] not found"),
    AUTHORITY_NAME_FORMAT_ERROR(15013, "Authority [%s] name format error"),
    AUTHORITY_CAN_NOT_BE_REMOVED(15014, "Authority [%s] can't be removed"),
    SCOPE_NAME_FORMAT_ERROR(15015, "Scope [%s] name format error"),
    SCOPE_ALREADY_LINKED_TO_AUTHORITY(15016, "Scope [%s] already linked to authority [%s]"),
    SCOPE_NOT_LINKED_TO_AUTHORITY(15017, "Scope [%s] not linked to authority [%s]"),
    SCOPE_NOT_FOUND(15018, "Scope [%s] not found"),
    USER_NOT_FOUND(15019, "User with email [%s] not found, when getting authorities and scopes"),
    USER_PROFILE_IS_NOT_FOUND(15021, "User Profile with email [%s] is not found"),
    AUTHORITY_USER_DELETION_NOT_FOUND(15022, "Authority [%s] not found"),
    UNKNOWN_NOTIFICATION_ENTITY(15101, "Unknown notification entity"),
    USER_NOT_FOUND_DURING_CHECKING_USER_DATA(15111, "User with email [%s] is not found"),
    //apis
    JSON_PARSING_ERROR(21001, "JSON parsing error: [%s]"),
    MISMATCHED_INPUT_ERROR(21002, "Mismatched input error: [%s]"),
    HTTP_MESSAGE_NOT_READABLE(21003, "HTTP message parsing error: [%s]"),
    RESOURCE_ACCESS_ERROR(21004, "Inner REST interaction error: [%s]"),
    REST_CLIENT_ERROR(21005, "Inner REST interaction error: [%s]"),
    MISSING_REQUEST_PARAMETER(21006, "Required [%s] parameter [%s] is not present"),
    REQUEST_METHOD_NOT_SUPPORTED(21007, "Request method [%s] not supported"),
    UNHANDLED_ERROR(21008, "Unhandled error: [%s]"),
    DATA_ACCESS_ERROR(21009, "Could not execute statement; class [%s]; error: [%s]"),
    UNEXPECTED_ERROR(21010, "Unexpected error, please contact Administrators: [%s]"),
    WRONG_RESPONSE_OBJECT(22001, "Invalid endpoint return type: [%s]"),
    FEE_RULE_CONVERTER_METHOD_NOT_FOUND(22011, "Specified Payment Method ID is not found in DB"),
    FEE_RULE_CONVERTER_GATEWAY_ACCOUNT_NOT_FOUND(22012, "Specified Gateway Account UUID is not found in DB"),
    FEE_RULE_CONVERTER_SUCCESS_ACCOUNT_NOT_FOUND(22013, "Specified Success Account UUID is not found in DB"),
    FEE_RULE_CONVERTER_CONDITIONAL_ACCOUNT_NOT_FOUND(22014, "Specified Conditional Account UUID is not found in DB"),
    FEE_RULE_CONVERTER_REFUND_ACCOUNT_NOT_FOUND(22015, "Specified Refund Account UUID is not found in DB"),
    FEE_RULE_CONVERTER_ROLLING_ACCOUNT_NOT_FOUND(22016, "Specified Rolling Account UUID is not found in DB"),
    FEE_RULE_CONVERTER_ROLLING_ACCOUNT_AMOUNT(22017, "Rolling Account and Amount cannot be used without each other"),
    CONVERSION_ERROR(23001, "Failed to convert value [%s] to required type [%s]"),
    INVALID_VALUE_FOR_SORT_DIRECTION(24001,
            "Invalid value [%s] for orders given! Has to be either [desc] or [asc] (case insensitive)"),
    SORT_DIRECTION_NOT_FOUND(24002, "Sort direction for field [%s] is not found"),
    USER_PROFILE_USER_IS_NOT_FOUND(25001, "User with email [%s] is not found"),
    USER_UPDATE_CURRENT_CUSTOMER_EMPTY(25011, "Customer UUID is empty"),
    USER_UPDATE_CURRENT_CUSTOMER_NOT_FOUND(25012, "Customer with UUID [%s] not found"),
    //models
    UNKNOWN_ERROR_CODE(30000, "Unknown error code for field [%s]"),
    CREDENTIALS_MODEL_EMAIL_NOT_BLANK(30001, "The field [%s] cannot be blank"),
    CREDENTIALS_MODEL_EMAIL_FORMAT(30002, "The field [%s] does not match to email pattern"),
    CREDENTIALS_MODEL_EMAIL_SIZE(30003, "The field [%s] must have the size between [%s] and [%s]"),
    CREDENTIALS_MODEL_PASSWORD_NOT_BLANK(30004, "The field [%s] cannot be blank"),
    CREDENTIALS_MODEL_PASSWORD_SIZE(30005, "The field [%s] must have the size between [%s] and [%s]"),
    AUTHORITY_SUPERADMIN_CAN_NOT_BE_CHANGED(30011, "Authority [SUPERADMIN] can't be changed"),
    ONLY_SUPERADMIN_CAN_CREATE_ADMIN(30012, "Not enough permissions to work with [ADMIN] authority"),
    ONLY_ADMIN_CAN_MODIFY_AUTHORITY(30013, "Only ADMIN can work with scopes and authorities"),
    AUTHORITY_SUPERADMIN_CAN_NOT_BE_VIEWED_BY_ADMIN(30014, "Authority can't be viewed"),
    SUPERADMIN_AUTHORITIES_CAN_NOT_BE_VIEWED_BY_ADMIN(30015, "Can't load authorities"),
    REFRESH_TOKEN_NOT_BLANK(30016, "Refresh token can not be blank"),
    MERCHANT_REQUEST_COUNTRY_NOT_BLANK(30021, "The field [%s] cannot be blank"),
    MERCHANT_REQUEST_COUNTRY_NOT_FOUND(30022, "The country [%2$s] is not valid"),
    MERCHANT_REQUEST_AMOUNT_NOT_NULL(30031, "The field [%s] cannot be null"),
    MERCHANT_REQUEST_AMOUNT_MORE_ZERO(30032, "The value of the field [%s] must have between [%s] and [%s]"),
    MERCHANT_REQUEST_CURRENCY_SIZE(30041, "The field [%s] must have the size between [%s] and [%s]"),
    MERCHANT_REQUEST_CURRENCY_NOT_EMPTY(30042, "The field [%s] cannot be blank"),
    MERCHANT_REQUEST_CURRENCY_NOT_FOUND(30043, "The currency [%2$s] is not found"),
    MERCHANT_REQUEST_CURRENCY_ACCOUNT_NOT_FOUND(30044, "Peratera account for the currency [%2$s] is not found"),
    MERCHANT_REQUEST_MERCHANT_TRANSACTION_SIZE(30051, "The field [%s] must have the size between [%s] and [%s]"),
    MERCHANT_REQUEST_MERCHANT_TRANSACTION_NOT_EMPTY(30052, "The field [%s] cannot be blank"),
    MERCHANT_REQUEST_DESCRIPTION_SIZE(30061, "The field [%s] must have the size between [%s] and [%s]"),
    MERCHANT_REQUEST_PREFERRED_METHOD_NOT_NULL(30071, "The field [%s] cannot be null"),
    MERCHANT_REQUEST_PREFERRED_METHOD_RANGE(30072, "The value of the field [%s] must have between [%s] and [%s]"),
    MERCHANT_REQUEST_METHOD_NOT_FOUND(30073, "Payment Method [%2$s] is not found"),
    MERCHANT_REQUEST_CUSTOMER_NOT_FOUND(30081, "Unexpected error: Merchant [%2$s] is not found in database"),
    MERCHANT_REQUEST_ACTION_NOT_FOUNT(30091, "The action [%2$s] is not valid"),
    MERCHANT_REQUEST_COUNTERPARTY_NAME_SIZE(30101, "The field [%s] must have the size between [%s] and [%s]"),
    MERCHANT_REQUEST_COUNTERPARTY_NAME_NOT_EMPTY(30102, "The field [%s] cannot be blank"),
    MERCHANT_REQUEST_TOWN_SIZE(30111, "The field [%s] must have the size between [%s] and [%s]"),
    MERCHANT_REQUEST_STREET_SIZE(30121, "The field [%s] must have the size between [%s] and [%s]"),
    MERCHANT_REQUEST_PREMISE_SIZE(30131, "The field [%s] must have the size between [%s] and [%s]"),
    MERCHANT_REQUEST_POSTCODE_SIZE(30141, "The field [%s] must have the size between [%s] and [%s]"),
    MERCHANT_REQUEST_COUNTERPARTY_ID_SIZE(30151, "The field [%s] must have the size between [%s] and [%s]"),
    MERCHANT_REQUEST_PHONE_PATTERN(30161, "The field [%s] does not match the regexp"),
    MERCHANT_REQUEST_EMAIL_NOT_VALID(30171, "The field [%s] has invalid email format"),
    MERCHANT_REQUEST_EMAIL_BLANK(30172, "The field [%s] is blank or null"),
    MERCHANT_REQUEST_RETURN_URL(30181, "The field [%s] has invalid URL [%s]"),
    MERCHANT_REQUEST_MERCHANT_RETURN_URL_SIZE(30182, "The field [%s] must have the size between [%s] and [%s]"),
    MERCHANT_REQUEST_RESULT_URL(30183, "The field [%s] has invalid URL [%s]"),
    MERCHANT_REQUEST_MERCHANT_RESULT_URL_SIZE(30184, "The field [%s] must have the size between [%s] and [%s]"),
    MERCHANT_REQUEST_FAIL_URL(30185, "The field [%s] has invalid URL [%s]"),
    MERCHANT_REQUEST_SIGNATURE_EMPTY(30191, "The signature in the request of Merchant [%s] is empty"),
    MERCHANT_REQUEST_SIGNATURE_BROKEN(30192, "The signature in the request of Merchant [%s] is broken"),
    MERCHANT_REQUEST_SIGNATURE_INVALID(30191, "The signature in the request of Merchant [%s] is invalid"),
    INDIVIDUAL_PAYMENT_NO_PERMISSIONS(30200, "The User cannot approve specified transaction"),
    INDIVIDUAL_PAYMENT_TRANSACTION_NOT_BLANK(30201, "The field [%s] cannot be blank"),
    INDIVIDUAL_PAYMENT_TRANSACTION_NOT_FOUND(30202, "Transaction [%s] is not found"),
    INDIVIDUAL_PAYMENT_TRANSACTION_NOT_REQUESTED(30203, "Transaction [%s] is not REQUESTED"),
    CUSTOMER_ACCOUNT_CURRENCY_NOT_BLANK(30221, "The field [%s] cannot be blank"),
    CUSTOMER_ACCOUNT_ACCOUNT_TYPE_NOT_BLANK(30222, "The field [%s] cannot be blank"),
    CUSTOMER_ACCOUNT_CURRENCY_NOT_FOUND(30223, "The currency [%2$s] is not found"),
    CUSTOMER_ACCOUNT_ACCOUNT_TYPE_NOT_FOUND(30224, "The account type [%2$s] is not found"),
    CUSTOMER_ACCOUNT_CUSTOMER_NOT_FOUND(30225, "The customer [%s] is not found"),
    CUSTOMER_ACCOUNT_ACCOUNT_NOT_FOUND(30226, "The account [%s] is not found"),
    CURRENCY_MODEL_COINS_NULL_ERROR(30230, "CurrencyModel field [%s] value must not be null"),
    CURRENCY_MODEL_ISO_NULL_ERROR(30231, "CurrencyModel field [%s] value must not be null"),
    CURRENCY_MODEL_ID_BLANK_ERROR(30232, "CurrencyModel field [%s] value must not be empty"),
    CURRENCY_MODEL_CODE_BLANK_ERROR(30233, "CurrencyModel field [%s] value must not be empty"),
    CURRENCY_MODEL_TITLE_BLANK_ERROR(30234, "CurrencyModel field [%s] value must not be empty"),
    CURRENCY_MODEL_COINS_RANGE_ERROR(30235, "CurrencyModel field [%s] value must be in range [%d-%d] but equals [%d]"),
    CURRENCY_MODEL_CODE_SIZE_ERROR(30236,
        "CurrencyModel field [%s] field value must have a length between [%d-%d]: [%s]"),
    CURRENCY_MODEL_TITLE_SIZE_ERROR(30237,
        "CurrencyModel field [%s] field value must have a length between [%d-%d]: [%s]"),
    CURRENCY_MODEL_ID_PATTERN_ERROR(30238, "CurrencyModel field [%s] value [%s] doesn't match the pattern"),
    PAYMENT_METHOD_MODEL_ID_NULL_ERROR(30240, "PaymentMethodModel field [%s] value must not be null"),
    PAYMENT_METHOD_MODEL_INCOMING_NULL_ERROR(30241, "PaymentMethodModel field [%s] value must not be null"),
    PAYMENT_METHOD_MODEL_REFUND_NULL_ERROR(30242, "PaymentMethodModel field [%s] value must not be null"),
    PAYMENT_METHOD_MODEL_PARTIAL_REFUND_NULL_ERROR(30243, "PaymentMethodModel field [%s] value must not be null"),
    PAYMENT_METHOD_MODEL_NAME_BLANK_ERROR(30244, "PaymentMethodModel field [%s] value must not be empty"),
    PAYMENT_METHOD_MODEL_ID_RANGE_ERROR(30245,
        "PaymentMethodModel field [%s] value must be in range [%d-%d] but equals [%d]"),
    PAYMENT_METHOD_MODEL_NAME_SIZE_ERROR(30246,
        "PaymentMethodModel field [%s] field value must have a length between [%d-%d]: [%s]"),
    AUTHORITY_MODEL_AUTHORITY_NAME_BLANK_ERROR(30250, "AuthorityModel field [%s] value must not be empty"),
    AUTHORITY_MODEL_AUTHORITY_NAME_PATTERN_ERROR(30251,
            "AuthorityModel field [%s] value [%s] doesn't match the pattern"),
    SCOPE_MODEL_SCOPE_NAME_BLANK_ERROR(30252, "ScopeModel field [%s] value must not be empty"),
    SCOPE_MODEL_SCOPE_NAME_PATTERN_ERROR(30253, "ScopeModel field [%s] value [%s] doesn't match the pattern"),
    ACCOUNT_TYPE_MODEL_CODE_NOT_BLANK(30261, "The field [%s] cannot be blank"),
    ACCOUNT_TYPE_MODEL_CODE_SIZE(30262, "The field [%s] must have the size between [%s] and [%s]"),
    ACCOUNT_TYPE_MODEL_NAME_NOT_BLANK(30263, "The field [%s] cannot be blank"),
    ACCOUNT_TYPE_MODEL_NAME_SIZE(30264, "The field [%s] must have the size between [%s] and [%s]"),
    ACCOUNT_TYPE_MODEL_DESCRIPTION_SIZE(30265, "The field [%s] must have the size between [%s] and [%s]"),
    ACCOUNT_TYPE_MODEL_ENABLED_NOT_NULL(30266, "The field [%s] cannot be null"),
    MERCHANT_CDD_COMPANY_NAME_BLANK(30301, "The field [%s] cannot be blank"),
    MERCHANT_CDD_INFO_NULL(30302, "The field [%s] cannot be null"),
    MERCHANT_CDD_COMPANY_DETAILS_NULL(30303, "The field [%s] cannot be null"),
    MERCHANT_CDD_COMPANY_ADDRESS_NULL(30304, "The field [%s] cannot be null"),
    MERCHANT_CDD_COMPANY_OFFICE_ADDRESS_NULL(30305, "The field [%s] cannot be null"),
    MERCHANT_CDD_DIRECTORS_NULL(30306, "The field [%s] cannot be null"),
    MERCHANT_CDD_INDIVIDUAL_SHAREHOLDERS_NULL(30307, "The field [%s] cannot be null"),
    MERCHANT_CDD_COMPANY_SHAREHOLDERS_NULL(30308, "The field [%s] cannot be null"),
    MERCHANT_CDD_INDUSTRIES_NULL(30309, "The field [%s] cannot be null"),
    MERCHANT_CDD_CD_COMPANY_NAME_BLANK(30310, "The field [%s] cannot be blank"),
    MERCHANT_CDD_CD_REGISTERED_NAME_BLANK(30311, "The field [%s] cannot be blank"),
    MERCHANT_CDD_CD_REGISTRATION_NO_BLANK(30312, "The field [%s] cannot be blank"),
    MERCHANT_CDD_CD_INCORPORATION_DATE_BLANK(30313, "The field [%s] cannot be blank"),
    MERCHANT_CDD_COUNTRY_BLANK(30314, "The field [%s] cannot be blank"),
    MERCHANT_CDD_COUNTRY_WRONG_CODE(30315, "The country code [%s] is wrong"),
    MERCHANT_CDD_ADDRESS_CODE_BLANK(30316, "The field [%s] cannot be blank"),
    MERCHANT_CDD_ADDRESS_CITY_BLANK(30317, "The field [%s] cannot be blank"),
    MERCHANT_CDD_ADDRESS_LINE1_BLANK(30318, "The field [%s] cannot be blank"),
    MERCHANT_CDD_COMPANY_CONTACT_PHONE_BLANK(30319, "The field [%s] cannot be blank"),
    MERCHANT_CDD_COMPANY_CONTACT_EMAIL_BLANK(30320, "The field [%s] cannot be blank"),
    MERCHANT_CDD_PERSON_FIRST_NAME_BLANK(30321, "The field [%s] cannot be blank"),
    MERCHANT_CDD_PERSON_LAST_NAME_BLANK(30322, "The field [%s] cannot be blank"),
    MERCHANT_CDD_PERSON_BIRTH_DATE_BLANK(30323, "The field [%s] cannot be blank"),
    MERCHANT_CDD_PERSON_ADDRESS_NULL(30324, "The field [%s] cannot be null"),
    MERCHANT_CDD_SHAREHOLDER_PERCENTAGE_BLANK(30325, "The field [%s] cannot be blank"),
    MERCHANT_CDD_OWNER_PERSON_NULL(30326, "The field [%s] cannot be null"),
    MERCHANT_CDD_SHAREHOLDER_COMPANY_REGISTERED_NAME_BLANK(30327, "The field [%s] cannot be blank"),
    MERCHANT_CDD_SHAREHOLDER_COMPANY_ADDRESS_NULL(30328, "The field [%s] cannot be null"),
    MERCHANT_CDD_INDUSTRY_BUSINESS_SIZE_NULL(30329, "The field [%s] cannot be null"),
    MERCHANT_CDD_INDUSTRY_BILLING_DESCRIPTOR_BLANK(30330, "The field [%s] cannot be blank"),
    MERCHANT_CDD_INDUSTRY_WEBSITE_BLANK(30331, "The field [%s] cannot be blank"),
    MERCHANT_CDD_INDUSTRY_CATEGORY_BLANK(30332, "The field [%s] cannot be blank"),
    MERCHANT_CDD_INDUSTRY_AVG_TICKET_SIZE_BLANK(30333, "The field [%s] cannot be blank"),
    MERCHANT_CDD_INDUSTRY_TRANSACTIONS_PER_MONTH_BLANK(30334, "The field [%s] cannot be blank"),
    MERCHANT_CDD_COMPANY_NAME_PATTERN(30335, "The field [%s] value [%s] doesn't match the pattern"),
    MERCHANT_CDD_CD_REGISTERED_NAME_SIZE(30336, "The field [%s] size doesn't fit constraints"),
    MERCHANT_CDD_CD_INCORPORATION_DATE_PATTERN(30337, "The field [%s] value [%s] doesn't match the pattern"),
    MERCHANT_CDD_COMPANY_CONTACT_EMAIL_FORMAT(30338, "The field [%s] value [%s] doesn't match the format"),
    MERCHANT_CDD_PERSON_FIRST_NAME_SIZE(30339, "The field [%s] size doesn't fit bounds"),
    MERCHANT_CDD_PERSON_LAST_NAME_SIZE(30340, "The field [%s] size doesn't fit bounds"),
    MERCHANT_CDD_PERSON_BIRTH_DATE_PATTERN(30341, "The field [%s] value [%s] doesn't match the pattern"),
    MERCHANT_CDD_PERSON_EMAIL_FORMAT(30342, "The field [%s] value [%s] doesn't match the format"),
    MERCHANT_CDD_CD_REGISTRATION_NO_SIZE(30343, "The field [%s] size doesn't fit bounds"),
    MERCHANT_CDD_CD_TAX_ID_SIZE(30344, "The field [%s] size doesn't fit bounds"),
    MERCHANT_CDD_ADDRESS_CODE_SIZE(30345, "The field [%s] size doesn't fit bounds"),
    MERCHANT_CDD_ADDRESS_CITY_SIZE(30346, "The field [%s] size doesn't fit bounds"),
    MERCHANT_CDD_ADDRESS_LINE1_SIZE(30347, "The field [%s] size doesn't fit bounds"),
    MERCHANT_CDD_ADDRESS_LINE2_SIZE(30348, "The field [%s] size doesn't fit bounds"),
    MERCHANT_CDD_COMPANY_CONTACT_PHONE_SIZE(30349, "The field [%s] size doesn't fit bounds"),
    MERCHANT_CDD_PERSON_PHONE_SIZE(30350, "The field [%s] size doesn't fit bounds"),
    MERCHANT_CDD_SHAREHOLDER_PERCENTAGE_SIZE(30351, "The field [%s] size doesn't fit bounds"),
    MERCHANT_CDD_SHAREHOLDER_COMPANY_REGISTERED_NAME_SIZE(30352, "The field [%s] cannot be blank"),
    MERCHANT_CDD_INDUSTRY_BILLING_DESCRIPTOR_SIZE(30353, "The field [%s] size doesn't fit bounds"),
    MERCHANT_CDD_INDUSTRY_WEBSITE_SIZE(30354, "The field [%s] size doesn't fit bounds"),
    MERCHANT_CDD_INDUSTRY_CATEGORY_SIZE(30355, "The field [%s] size doesn't fit bounds"),
    MERCHANT_CDD_INDUSTRY_SUBCATEGORY_SIZE(30356, "The field [%s] size doesn't fit bounds"),
    MERCHANT_CDD_INDUSTRY_AVG_TICKET_SIZE_SIZE(30357, "The field [%s] size doesn't fit bounds"),
    MERCHANT_CDD_INDUSTRY_TRANSACTIONS_PER_MONTH_SIZE(30358, "The field [%s] size doesn't fit bounds"),
    MERCHANT_CDD_CURRENCIES_EMPTY(30359, "The currencies list for a field [%s] cannot be empty"),
    INDIVIDUAL_APP_MODEL_FIRST_NAME_BLANK(30380, "The field [%s] cannot be blank"),
    INDIVIDUAL_APP_MODEL_LAST_NAME_BLANK(30381, "The field [%s] cannot be blank"),
    INDIVIDUAL_APP_MODEL_INFO_NULL(30382, "The field [%s] cannot be null"),
    INDIVIDUAL_INFO_MODEL_BIRTH_DATE_BLANK(30383, "The field [%s] cannot be blank"),
    INDIVIDUAL_INFO_MODEL_BIRTH_DATE_PATTERN(30384, "The field [%s] value [%s] doesn't match the pattern"),
    INDIVIDUAL_INFO_MODEL_ADDRESS_NULL(30385, "The field [%s] cannot be null"),
    INDIVIDUAL_INFO_MODEL_ADDRESS_COUNTRY_BLANK(30386, "The field [%s] cannot be blank"),
    INDIVIDUAL_INFO_MODEL_ADDRESS_COUNTRY_WRONG_CODE(30387, "The country code [%s] is wrong"),
    INDIVIDUAL_INFO_MODEL_ADDRESS_CODE_BLANK(30387, "The field [%s] cannot be blank"),
    INDIVIDUAL_INFO_MODEL_ADDRESS_CITY_BLANK(30388, "The field [%s] cannot be blank"),
    INDIVIDUAL_INFO_MODEL_ADDRESS_LINE1_BLANK(30389, "The field [%s] cannot be blank"),
    INDIVIDUAL_APP_MODEL_FIRST_NAME_SIZE(30390, "The field [%s] size doesn't fit bounds"),
    INDIVIDUAL_APP_MODEL_LAST_NAME_SIZE(30391, "The field [%s] size doesn't fit bounds"),
    INDIVIDUAL_INFO_MODEL_ADDRESS_CODE_SIZE(30392, "The field [%s] size doesn't fit bounds"),
    INDIVIDUAL_INFO_MODEL_ADDRESS_CITY_SIZE(30393, "The field [%s] size doesn't fit bounds"),
    INDIVIDUAL_INFO_MODEL_ADDRESS_LINE1_SIZE(30394, "The field [%s] size doesn't fit bounds"),
    INDIVIDUAL_INFO_MODEL_ADDRESS_LINE2_SIZE(30395, "The field [%s] size doesn't fit bounds"),
    PROVIDER_MODEL_NAME_NOT_BLANK(30400, "The field [%s] cannot be blank"),
    PROVIDER_MODEL_NAME_SIZE(30401, "The field [%s] must have the size between [%s] and [%s]"),
    TARIFF_PLAN_MODEL_NAME_SIZE(30410, "The field [%s] must have the size between [%s] and [%s]"),
    TARIFF_PLAN_MODEL_NAME_NOT_BLANK(30411, "The field [%s] cannot be blank"),
    TARIFF_PLAN_MODEL_DESCRIPTION_SIZE(30412, "The field [%s] must have the size between [%s] and [%s]"),
    TARIFF_PLAN_DEFAULT_MODEL_NAME_SIZE(30420, "The field [%s] must have the size between [%s] and [%s]"),
    TARIFF_PLAN_DEFAULT_MODEL_NAME_NOT_BLANK(30421, "The field [%s] cannot be blank"),
    TARIFF_PLAN_DEFAULT_MODEL_DESCRIPTION_SIZE(30422, "The field [%s] must have the size between [%s] and [%s]"),
    TARIFF_PLAN_DEFAULT_MODEL_ACCOUNT_TYPE_CODE_NOT_BLANK(30423, "The field [%s] cannot be blank"),
    TARIFF_PLAN_DEFAULT_MODEL_CURRENCY_CODE_NOT_BLANK(30424, "The field [%s] cannot be blank"),
    FEE_RULE_MODEL_PAYMENT_METHOD_ID_NOT_NULL(30451, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_CURRENCY_NOT_BLANK(30452, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_TOTAL_FEE_MIN_RANGE(30453, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_TOTAL_FEE_MAX_RANGE(30454, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_GATEWAY_FEE_AMOUNT_RANGE(30455, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_GATEWAY_FEE_PERCENTAGE_RANGE(30456, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_GATEWAY_FEE_MIN_RANGE(30457, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_GATEWAY_FEE_MAX_RANGE(30458, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_SUCCESS_FEE_AMOUNT_RANGE(30459, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_SUCCESS_FEE_PERCENTAGE_RANGE(30460, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_SUCCESS_FEE_MIN_RANGE(30461, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_SUCCESS_FEE_MAX_RANGE(30462, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_CONDITIONAL_FEE_AMOUNT_RANGE(30463, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_CONDITIONAL_FEE_PERCENTAGE_RANGE(30464,
            "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_CONDITIONAL_FEE_MIN_RANGE(30465, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_CONDITIONAL_FEE_MAX_RANGE(30466, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_REFUND_FEE_AMOUNT_RANGE(30467, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_REFUND_FEE_PERCENTAGE_RANGE(30468, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_REFUND_FEE_MIN_RANGE(30469, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_REFUND_FEE_MAX_RANGE(30470, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_ROLLING_RESERVE_AMOUNT_RANGE(30471, "The value of the field [%s] must have between [%s] and [%s]"),
    FEE_RULE_MODEL_ROLLING_RESERVE_DAYS_RANGE(30472, "The value of the field [%s] must have between [%s] and [%s]"),
    PAYMENT_METHOD_SELECT_MODEL_ID_NULL_ERROR(30500, "The field [%s] value must not be null"),
    PAYMENT_METHOD_SELECT_MODEL_METHOD_NOT_FOUND_BY_ID(30501, "PaymentMethod with ID [%d] not found"),
    ACCOUNT_SELECT_MODEL_UUID_BLANK_ERROR(30510, "The field [%s] value must not be blank"),
    CDD_INFO_MODEL_TO_DB_CONVERT_ERROR(30520, "Can not convert cddInfoModel [%s] to database column"),
    DB_TO_CDD_INFO_MODEL_CONVERT_ERROR(30521, "Can not convert database column [%s] to cddInfoModel entity"),
    COMMENT_MODEL_COUNTRY_NOT_FOUND(30531, "The country [%2$s] is not valid"),
    COMMENT_MODEL_COUNTRY_NOT_BLANK(30532, "The field [%s] cannot be blank"),
    COMMENT_MODEL_COUNTRY_NOT_NULL(30533, "The field 'country' cannot be empty"),
    COMMENT_MODEL_FIRST_NAME_SIZE(30534, "The field [%s] must have the size between [%s] and [%s]"),
    COMMENT_MODEL_LAST_NAME_SIZE(30535, "The field [%s] must have the size between [%s] and [%s]"),
    COMMENT_MODEL_EMAIL_FORMAT(30536, "The field [%s] value [%s] doesn't match the format"),
    COMMENT_MODEL_EMAIL_NOT_BLANK(30537, "The field [%s] cannot be blank"),
    COMMENT_MODEL_COMPANY_NAME_SIZE(30538, "The field [%s] must have the size between [%s] and [%s]"),
    COMMENT_MODEL_PHONE_SIZE(30539, "The field [%s] must have the size between [%s] and [%s]"),
    COMMENT_MODEL_WEBSITE_URL_FORMAT(30540, "The field [%s] has invalid URL [%s]"),
    COMMENT_MODEL_WEBSITE_SIZE(30541, "The field [%s] must have the size between [%s] and [%s]"),
    COMMENT_MODEL_PAYMENTS_VOLUME_SIZE(30542, "The field [%s] must have the size between [%s] and [%s]"),
    COMMENT_MODEL_COMMENT_SIZE(30543, "The field [%s] must have the size between [%s] and [%s]"),
    //user-api
    MERCHANT_TOKEN_NULLABLE(40001, "The token for Merchant with ID [%s] is not received"),
    MERCHANT_NOT_FOUND_TOKEN(40002, "Merchant with ID [%s] is not found"),
    NOT_MERCHANT_TOKEN_REQUEST(40003, "Token generation is called for not merchant customer [%s]"),
    NOT_ACTIVATED_MERCHANT_TOKEN(40004, "Token generation is called for not activated merchant [%s]"),
    USER_NOT_RELATED_MERCHANT_TOKEN(40005,
            "User [%s] does not have permissions for token generation for merchant [%s]"),
    CUSTOMER_NOT_FOUND_TOKEN(40008, "Customer with UUID [%s] is not found"),
    AUTHENTICATION_NO_DETAILS(40011, "Authentication does not have details or not decoded"),
    AUTHENTICATION_MERCHANT_WRONG(40012, "Authentication wrong, received token is not Merchant's one"),
    CREATE_MERCHANT_ACCOUNT_NOT_AUTHORIZE(40013, "User [%s] does not have permissions for actions with Merchant [%s]"),
    USER_CUSTOMER_STATUS_INSUFFICIENT(40014, "User [%s] does not have permissions for the action with Merchant"),
    MERCHANT_MISSING_CDD_DOCUMENT(40015, "The Merchant doesn't have a required CDD document of type [%s] with "
            + "code [%s]"),
    MERCHANT_CDD_DOCUMENT_TYPE_NOT_FOUND(40016, "Can't find CDD document type by code [%s]"),
    MERCHANT_CDD_DOCUMENT_NOT_FOUND(40017, "Can't find CDD document [%s] for merchant [%s]"),
    MERCHANT_CDD_DOCUMENT_S3_LOAD_ERROR(40018, "Can't load CDD document [%s] from S3"),
    MERCHANT_CDD_DOCUMENT_S3_PUT_ERROR(40019, "Can't put CDD document [%s] to S3"),
    MERCHANT_CDD_DOCUMENT_S3_DELETE_ERROR(40020, "Can't delete CDD document [%s] from S3"),
    GET_MERCHANT_ACCOUNTS_NOT_AUTHORIZE(40021, "User [%s] does not have permissions for actions with Merchant [%s]"),
    DELETE_MERCHANT_ACCOUNT_NOT_AUTHORIZE(40031, "User [%s] does not have permissions for actions with Merchant [%s]"),
    DELETE_MERCHANT_ACCOUNT_INVALID_MERCHANT(40032, "The account [%s] does not pertain the Merchant with UUID [%s]"),
    DELETE_MERCHANT_ACCOUNT_HAS_BALANCE(40033, "The account [%s] has funds on the balance, first clear the account"),
    DELETE_MERCHANT_ACCOUNT_ALREADY_REMOVED(40034, "The account [%s] has been already removed"),
    MERCHANT_CREATE_CURRENCIES_INVALID(40038,
            "The field [%s] contains currency codes [%s] are invalid or not present in the Peratera DB"),
    MERCHANT_UPDATE_CURRENCIES_INVALID(40039,
            "The field [%s] contains currency codes [%s] are invalid or not present in the Peratera DB"),
    USER_CURRENCY_NOT_FOUND_BY_ID(40041, "Currency with ID [%d] not found"),
    USER_CURRENCY_NOT_FOUND_BY_CODE(40042, "Currency with CODE [%d] not found"),
    USER_MERCHANT_REQUEST_WRONG_USER(40051,
            "User [%s] does not have permissions for actions with User Merchant Request [%s]"),
    PRIVATE_INDIVIDUAL_ACCOUNT_WRONG_USER(40052, "User [%s] does not have permissions for actions with Account [%s]"),
    PRIVATE_INDIVIDUAL_WRONG_USER_EMAIL(40061, "Can not find Private Individual for user with email [%s]"),
    GET_PRIVATE_ACCOUNTS_NOT_AUTHORIZE(40065,
            "User [%s] does not have permissions for actions with Private Individual [%s]"),
    USER_CUSTOMER_TYPE_WITH_NAME_NOT_FOUND(40071, "Customer Type with name [%s] is not found"),
    AUTHORIZATION_CONFIRMATION_WRONG_EMAIL(40081, "Specified email [%s] has a wrong format"),
    AUTHORIZATION_CONFIRMATION_EMPTY_EMAIL(40082, "Specified email [%s] is null or empty"),
    AUTHORIZATION_CONFIRMATION_OVERSIZE_EMAIL(40083, "Email [%s] must have the size between [%s] and [%s]"),
    AUTHORIZATION_CONFIRMATION_EMPTY_CODE(40084, "Specified confirmation code [%s] is null or empty"),
    AUTHORIZATION_CONFIRMATION_OVERSIZE_CODE(40085, "Confirmation code [%s] must have the size between [%s] and [%s]"),
    RESET_PASSWORD_EMPTY_EMAIL(40091, "Specified email [%s] is null or empty"),
    RESET_PASSWORD_WRONG_EMAIL(40092, "Specified email [%s] has a wrong format"),
    CREATE_INDIVIDUAL_INITIATOR_NOT_FOUND(40101, "The User [%s] is not found"),
    CREATE_INDIVIDUAL_ALREADY_EXISTS_FOR_USER(40102, "The Private Individual already exists for user [%s]"),
    GET_INDIVIDUAL_NOT_FOUND_FOR_USER(40103, "The Private Individual not found for user [%s]"),
    UPDATE_INDIVIDUAL_NOT_FOUND_FOR_USER(40104, "The Private Individual not found for user [%s]"),
    MERCHANT_HISTORY_BY_CUSTOMER_EVENT_NOT_FOUND(40105, "Merchant history [%s] by customer event [%s]"),
    REGISTRATION_INVALID_CREDENTIALS(40110, "User [%s] is in the regprocess but credentials are invalid"),
    REGISTRATION_ALREADY_REGISTERED(40111, "User with email [%s] already registered"),
    REGISTRATION_NOT_STARTED(40112, "The regprocess for Customer [%s] is not started"),
    REGISTRATION_ALREADY_STARTED(40113, "The regprocess already started. Please contact Peratera administrators"),
    REGISTRATION_INVALID_KEYWORD(40115, "Process keyword is absent or invalid"),
    REGISTRATION_NOT_CONFIRM_STEP(40116, "The regprocess for Customer [%s] is started, but has another position"),
    REGISTRATION_ACCOUNT_TYPE_NO_PERSONAL(40121, "Registration of Private Individuals while is not available"),
    REGISTRATION_ACCOUNT_TYPE_UNKNOWN(40122, "Unknown account type [%s]"),
    REGISTRATION_MERCHANT_SETUP_WRONG_SERIALIZATION(40123, "Error serialization of the Merchant Setup Account model"),
    REGISTRATION_ONFIDO_EMPTY_APPLICANT(40124, "Request should contain Applicant ID"),
    REGISTRATION_ONFIDO_NOT_FIND_CHECK(40125, "There is not found a Onfido Check by ID, please contact Administrator"),
    REGISTRATION_ONFIDO_CREATION_CHECK(40126,
            "Cannot create Onfido Check for applicant [%s], please contact Administrator"),
    REGISTRATION_CONFIRMATION_EMAIL_FORMAT(40201, "The field [%s] does not match to email pattern"),
    REGISTRATION_CONFIRMATION_EMAIL_NOT_BLANK(40202, "The field [%s] cannot be blank"),
    REGISTRATION_CONFIRMATION_EMAIL_SIZE(40203, "The field [%s] must have the size between [%s] and [%s]"),
    REGISTRATION_CONFIRMATION_EMPTY_KEYWORD(40206, "Specified field value [%s] is null or empty"),
    MERCHANT_SETUP_ACCOUNT_EMAIL_NOT_BLANK(41001, "The field [%s] cannot be blank"),
    MERCHANT_SETUP_ACCOUNT_EMAIL_FORMAT(41002, "The field [%s] does not match to email pattern"),
    MERCHANT_SETUP_ACCOUNT_EMAIL_SIZE(41003, "The field [%s] must have the size between [%s] and [%s]"),
    MERCHANT_SETUP_ACCOUNT_EMPTY_FIRST_NAME(41004, "The field [%s] cannot be blank"),
    MERCHANT_SETUP_ACCOUNT_FIRST_NAME_SIZE(41005, "The field [%s] must have the size between [%s] and [%s]"),
    MERCHANT_SETUP_ACCOUNT_LAST_NAME_NOT_EMPTY(41006, "The field [%s] cannot be blank"),
    MERCHANT_SETUP_ACCOUNT_LAST_NAME_SIZE(41007, "The field [%s] must have the size between [%s] and [%s]"),
    MERCHANT_SETUP_ACCOUNT_PHONE_PATTERN(41008, "The field [%s] value [%s] doesn't match the pattern"),
    MERCHANT_SETUP_ACCOUNT_EMPTY_COUNTRY(41009, "The field [%s] cannot be empty"),
    MERCHANT_SETUP_ACCOUNT_COUNTRY_NOT_FOUND(41010, "The country [%2$s] is not valid"),
    MERCHANT_SETUP_ACCOUNT_EMPTY_KEYWORD(41011, "The field [%s] cannot be blank"),
    GET_ACCOUNT_DETAILS_ACCOUNT_NOT_FOUND(40121, "The account with UUID [%s] not found"),
    GET_ACCOUNT_DETAILS_NOT_AUTHORIZED(40122,
            "User [%s] does not have permissions for actions with account [%s]"),
    USER_EXCEED_MAXIMUM_EXPECTED_SIZE_OF_INPUT_FILE(40130, "User input file size [%s] exceed the maximum size [2MB]"),
    USER_PROFILE_AVATAR_S3_PUT_ERROR(40131, "Can't put User profile avatar [%s] to S3"),
    USER_PROFILE_AVATAR_S3_DELETE_ERROR(40132, "Can't delete User profile avatar [%s] from S3"),
    USER_AVATAR_CANNOT_RESIZE(40133, "Can't resize user profile avatar [%s]"),
    USER_PROFILE_AVATAR_WRONG_EXTENSION(40134, "Input user profile avatar have wrong extension [%s]. "
            + "Allowed extensions are: [jpeg, png]"),
    USER_ADD_USER_CUSTOMER_RELATION_CUSTOMER_NOT_FOUND(40135, "The Customer [%s] is not found"),
    USER_ADD_USER_CUSTOMER_RELATION_USER_NOT_FOUND(40136, "The User [%s] is not found"),
    USER_ADD_USER_CUSTOMER_RELATION_CLEAR_AUTHORITIES_IMPOSSIBLE(40137, "Can't clear authorities for user [%s]"),
    USER_LOGIN_CODE_MISMATCH(40151, "Provided auth confirmation code [%s] does not match the auth code"),
    USER_LOGIN_GENERATE_CONFIRMATION_CODE_USER_PHONE_NUMBER_NOT_FOUND(40152, "The phone number for User [%s] is not found"),
    USER_LOGIN_INVALID_CREDENTIALS(40153, "User [%s] provided invalid credentials"),
    USER_LOGIN_GENERATE_CODE_TASK_STARTED(40154, "Generate user confirmation code task already started"),
    USER_LOGIN_CHECK_CODE_TASK_STARTED(40155, "Check user confirmation code task already started, current status is :[%s]"),
    USER_LOGIN_SEND_CODE_AGAIN_TASK_STARTED(40156, "There is a task that already has been started, current status is :[%s]"),
    USER_LOGIN_TASK_NOT_STARTED(40157, "The User login process not started yet for user [%s]"),
    USER_LOGIN_RESEND_CODE_EXCEED_ATTEMPTS(40158, "The User [%s] has been used all attempts to retrieve confirmation code. Reach out to Admin please"),
    USER_LOGIN_RESEND_CODE_NOTIFICATION_PAYLOAD_EMPTY(40159, "Empty payload message for user [%s]"),
    //camunda
    CREATE_MERCHANT_INITIATOR_NOT_FOUND(50001, "The User [%s] is not found"),
    CREATE_MERCHANT_EXECUTOR_NOT_FOUND(50002, "The User [%s] is not found"),
    CREATE_MERCHANT_CUSTOMER_NOT_FOUND(50003, "The Customer with ID [%s] is not found"),
    CREATE_MERCHANT_ALREADY_ACTIVE(50005, "User with ID [%s] is already activated"),
    CREATE_MERCHANT_SERIALIZATION_MODEL(50006, "Cannot serialize the model [%s]"),
    MERCHANT_REQUEST_ACCOUNT_NOT_FOUND(50011, "Unexpected error, at least one account for Merchant should be present"),
    MERCHANT_REQUEST_INDIVIDUAL_NOT_FOUND(50012,
            "Counterparty for this operation should be created, please contact with Peratera administrators"),
    MERCHANT_REQUEST_ACCOUNT_INDIVIDUAL_NOT_FOUND(50013, "Peratera account for a Counterparty for this operation "
            + "should be created, please contact with Peratera administrators"),
    MERCHANT_REQUEST_ACCOUNT_INDIVIDUAL_NO_AMOUNT(50014,
            "Account balance of a Counterparty is less than the Merchant Request amount"),
    MERCHANT_REQUEST_UUID_NOT_FOUND(50015, "Unexpected error :: Merchant Request UUID is not found"),
    MERCHANT_REQUEST_NOT_FOUND_BY_UUID(50016, "Unexpected error :: Merchant not found by received UUID [%s]"),
    MERCHANT_REQUEST_ALREADY_HANDLED(50017, "Merchant request [%s] already handled, process terminated"),
    FEE_RULE_TRANSACTION_NOT_FOUND(50021, "Transaction with UUID [%s] is not found"),
    MODULR_PREPARE_HEADERS_ERROR(50031, "Modulr prepare headers error: [%s]"),
    CLAIM_TICKET_NOT_FOUND(50041, "Claim ticket [%s] not found"),
    CLAIM_USER_DATA_NOT_FOUND(50042, "Information about User with email [%s] is not available"),
    //notification
    UNSUPPORTED_TRANSPORT(71001, "Unsupported transport [%s]"),
    TEMPLATE_NOT_FOUND(71002, "No template with transport type and action [%s]"),
    //support
    INCORRECT_HTTP_STATUS(81001, "HTTP Status does not match to response success"),
    UNEXPECTED_ERROR_ON_SUCCESS(81002, "Unexpected errors field with success response"),
    STRING_DESERIALIZATION_FAILED(81003, "Deserialization of String value is failed"),
    SERIALIZATION_VARIABLES_ERROR(81101, "Cannot serialize variables [%s]"),
    SERIALIZATION_ACTIVITY_ERROR(81102, "Cannot serialize activity [%s]"),
    USER_TASK_IS_NOT_ACTIVE(81103, "The User task [%s] is not active"),
    EVENT_PROVIDER_NO_CONSTRUCTOR(82001, "Cannot create a new event: [%s]"),
    EVENT_PROVIDER_NO_STATUS(82002, "The Status [%s - %s] not found in DB, please contact Administrators");

    private final int code;
    private final String message;

    ErrorCode(int code, String message) {
        this.code = code;
        this.message = message;
    }
}
